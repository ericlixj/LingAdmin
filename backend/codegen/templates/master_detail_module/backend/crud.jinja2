{# file: crud_master_detail_template.jinja #}
from datetime import datetime
from typing import Any, Dict, List, Optional

from app.models.{{ module_name }} import {{ class_name }}, {{ class_name }}Create, {{ class_name }}Update
from app.models.{{ detail_module_name }} import {{ detail_class_name }}
from sqlalchemy import func, update
from sqlalchemy.sql.elements import UnaryExpression
from sqlmodel import select
from app.crud.base import BaseCRUD

from app.core.logger import init_logger
import logging
init_logger()
logger = logging.getLogger(__name__) 

class {{ class_name }}CRUD(BaseCRUD):
    model = {{ class_name }}

    def get_by_id(self, {{ module_name }}_id: int) -> Optional[{{ class_name }}]:
        statement = select({{ class_name }}).where(
            {{ class_name }}.id == {{ module_name }}_id,
            {{ class_name }}.deleted == False
        )
        result = self.session.exec(statement).first()
        return result

    def create(self, obj_in: {{ class_name }}Create) -> {{ class_name }}:
        db_obj = {{ class_name }}(**obj_in.dict())
        self.session.add(db_obj)
        self.session.commit()
        self.session.refresh(db_obj)
        return db_obj

    def update(self, db_obj: {{ class_name }}, obj_in: {{ class_name }}Update) -> {{ class_name }}:
        update_data = obj_in.dict(exclude_unset=True)
        for field, value in update_data.items():
            setattr(db_obj, field, value)
        db_obj.update_time = datetime.utcnow()
        self.session.add(db_obj)
        self.session.commit()
        self.session.refresh(db_obj)
        return db_obj

    def soft_delete(self, db_obj: {{ class_name }}) -> {{ class_name }}:
        # 软删主表
        db_obj.deleted = True
        db_obj.update_time = datetime.utcnow()
        self.session.add(db_obj)

        # 同时软删关联的子表数据
        self.session.execute(
            update({{ detail_class_name }})
            .where({{ detail_class_name }}.{{ relation_field }} == db_obj.id)
            .values(
                deleted=True,
                update_time=datetime.utcnow()
            )
        )

        self.session.commit()
        self.session.refresh(db_obj)
        return db_obj

    def list_all(
        self,
        skip: int = 0,
        limit: int = 10,
        filters: Optional[Dict[str, Any]] = None,
        order_by: Optional[UnaryExpression] = None,
    ) -> List[{{ class_name }}]:
        query = select({{ class_name }}).where({{ class_name }}.deleted == False)
        query = self._apply_filters(query, filters)
        if order_by is not None:
            query = query.order_by(order_by)
        else:
            query = query.order_by({{ class_name }}.id.desc())
        return self.session.exec(query.offset(skip).limit(limit)).all()

    def count_all(self, filters: Optional[Dict[str, Any]] = None) -> int:
        query = select(func.count()).select_from({{ class_name }}).where({{ class_name }}.deleted == False)
        query = self._apply_filters(query, filters)
        return self.session.exec(query).one()
