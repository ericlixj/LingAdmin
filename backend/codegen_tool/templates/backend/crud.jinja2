from datetime import datetime
from typing import Any, Dict, List, Optional

from app.models.{{ module_name }} import {{ class_name }}, {{ class_name }}Create, {{ class_name }}Update
from sqlalchemy import func
from sqlalchemy.sql.elements import UnaryExpression
from sqlmodel import Session, col, select


class {{ class_name }}CRUD:
    def __init__(self, session: Session):
        self.session = session

    def get_by_id(self, {{ module_name }}_id: int) -> Optional[{{ class_name }}]:
        statement = select({{ class_name }}).where({{ class_name }}.id == {{ module_name }}_id, {{ class_name }}.deleted == False)
        result = self.session.exec(statement).first()
        return result

    def get_by_code(self, code: str) -> Optional[{{ class_name }}]:
        statement = select({{ class_name }}).where({{ class_name }}.code == code, {{ class_name }}.deleted == False)
        result = self.session.exec(statement).first()
        return result

    def create(self, obj_in: {{ class_name }}Create) -> {{ class_name }}:
        db_obj = {{ class_name }}.from_orm(obj_in)
        self.session.add(db_obj)
        self.session.commit()
        self.session.refresh(db_obj)
        return db_obj

    def update(self, db_obj: {{ class_name }}, obj_in: {{ class_name }}Update) -> {{ class_name }}:
        update_data = obj_in.dict(exclude_unset=True)
        for field, value in update_data.items():
            setattr(db_obj, field, value)
        db_obj.update_time = datetime.utcnow()
        self.session.add(db_obj)
        self.session.commit()
        self.session.refresh(db_obj)
        return db_obj

    def soft_delete(self, db_obj: {{ class_name }}) -> {{ class_name }}:
        db_obj.deleted = True
        db_obj.update_time = datetime.utcnow()
        self.session.add(db_obj)
        self.session.commit()
        self.session.refresh(db_obj)
        return db_obj

    def list_all(
        self,
        skip: int = 0,
        limit: int = 10,
        filters: Optional[Dict[str, Any]] = None,
        order_by: Optional[UnaryExpression] = None,
    ) -> List[{{ class_name }}]:
        query = select({{ class_name }}).where({{ class_name }}.deleted == False)
        if filters:
            if "code" in filters:
                query = query.where({{ class_name }}.code.contains(filters["code"]))
            if "name" in filters:
                query = query.where({{ class_name }}.name.contains(filters["name"]))

        if order_by is not None:
            query = query.order_by(order_by)
        else:
            query = query.order_by({{ class_name }}.id.desc())

        return self.session.exec(query.offset(skip).limit(limit)).all()

    def count_all(self, filters: Optional[Dict[str, Any]] = None) -> int:
        query = select(func.count()).select_from({{ class_name }}).where({{ class_name }}.deleted == False)

        if filters:
            if "code" in filters:
                query = query.where({{ class_name }}.code.contains(filters["code"]))
            if "name" in filters:
                query = query.where({{ class_name }}.name.contains(filters["name"]))

        return self.session.exec(query).one()
